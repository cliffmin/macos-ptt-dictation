plugins {
    id 'java'
    id 'application'
    id 'com.gradleup.shadow' version '8.3.5'
    id 'jacoco'
}

group = 'com.cliffmin'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // CLI framework
    implementation 'info.picocli:picocli:4.7.5'
    
    // JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // String utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-simple:2.0.9'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

application {
    mainClass = 'com.cliffmin.whisper.WhisperPostProcessorCLI'
}

// Configure JAR manifest
jar {
    manifest {
        attributes(
            'Main-Class': 'com.cliffmin.whisper.WhisperPostProcessorCLI',
            'Implementation-Title': 'Whisper Post Processor',
            'Implementation-Version': version
        )
    }
}

// Shadow JAR for fat JAR with all dependencies
shadowJar {
    archiveBaseName = 'whisper-post'
    archiveClassifier = ''
    archiveVersion = ''
    mergeServiceFiles()
}

// Test configuration
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Integration test configuration
task integrationTest(type: Test) {
    description = 'Run integration tests including E2E pipeline tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    // Include integration test classes
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    
    // Run integration tests after unit tests
    shouldRunAfter test
    
    // More verbose output for integration tests
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut"
        showStandardStreams = true
    }
    
    // Longer timeout for integration tests
    systemProperty 'junit.jupiter.execution.timeout.default', '60s'
}

// Task to run all tests (unit + integration)
task testAll(dependsOn: [test, integrationTest]) {
    description = 'Run all tests (unit and integration)'
    group = 'verification'
}

// Custom task to build a standalone executable
task buildExecutable(type: Copy, dependsOn: shadowJar) {
    from shadowJar
    into 'dist'
    rename { 'whisper-post.jar' }
    doLast {
        println "Executable JAR created: dist/whisper-post.jar"
        println "Run with: java -jar dist/whisper-post.jar"
    }
}

// Task to create a shell wrapper
task createWrapper(dependsOn: shadowJar) {
    doLast {
        def wrapperScript = file('dist/whisper-post')
        wrapperScript.parentFile.mkdirs()
        wrapperScript.text = """#!/bin/bash
# Whisper Post-Processor
SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
java -jar "\$SCRIPT_DIR/whisper-post.jar" "\$@"
"""
        wrapperScript.setExecutable(true)
        println "Wrapper script created: dist/whisper-post"
    }
}

// Build everything
task buildAll(dependsOn: [buildExecutable, createWrapper]) {
    doLast {
        println "Build complete! The processor is ready at: dist/whisper-post"
    }
}

// JaCoCo test coverage
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

test.finalizedBy jacocoTestReport
